#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('untitled:server');
var http = require('http');
var database = require('../public/databaseMongo/db');
var HashMap = require('hashmap');
var fs = require("fs");
var path = require("express");


/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
var io = require('socket.io')(server);
var usersConnected = new HashMap();
var dl  = require('delivery');

var roomId;
var waitforit;
var friendName, userName ;
io.on('connection', function(socket) {
    //images
    /*
    var delivery = dl.listen(socket);
    delivery.on('delivery.connect', function (delivery) {

        delivery.send({
            name: 'hope.jpg',
            path: './images/hope.jpg',
            params: {foo: 'bar'}
        });

        delivery.on('send.success', function (file) {
            console.log('File successfully sent to client!');
        });
    });
    */
        console.log(Object.keys(io.sockets.adapter.rooms)[0]);

        socket.on('friendsList', function (username) {
            database.findFriends(username, function (result) {
                console.log("List of friends:", result);
                socket.emit('friendsList', result);
            });
        });

        socket.on('chat message', function (msg) {
            io.to(msg.room).emit('chat message', msg);
            console.log(msg.room);
        });

        socket.on('disconnect', function () {
            io.emit('system msg', usersConnected.get(socket.id) + " is disconnected");
            usersConnected.delete(socket.id);
        })
        socket.on('user login', function (username) {
            console.log(username + " is connected");
            usersConnected.set(socket.id, username);
            //io.emit('system msg',UserName + " is connected");
        });

        socket.on('add friend', function (username, friend) {
            //set global username and friend for "socket.on ('confirm add friend1')"
            setNames(username, friend);
            //socket.emit('request add friend', username);
            console.log("Send to: ",friend, "  : ", usersConnected.search(friend)  );
            io.to(usersConnected.search(friend)).emit('request add friend', username);

        });

        socket.on('confirm add friend1', function (confirmAccept) {
        console.log("Console from www: ", confirmAccept);
        var message;
        var message1;
        if(confirmAccept) {
            //add  friend in your list
            console.log("User: ", userName, " Friend: ", friendName);
            database.addFriend(userName, friendName, function (modified) {
                if (modified) {
                    message = friendName + " has been added in your friend list";
                } else {
                    message = friendName + " has not been added in your friend list";
                }
                console.log("Message1:" + message);
                //socket.emit('confirm add friend', message);

                io.to(usersConnected.search(userName)).emit('confirm add friend', message, modified, friendName);

            });
            //add you in friend's list
            database.addFriend(friendName, userName, function (modified) {
                if (modified) {
                    message1 = userName + " has been added in your friend list";
                } else {
                    message1 = userName + " has not been added in your friend list";
                }
                console.log("Message2:" + message1);
                io.to(usersConnected.search(friendName)).emit('confirm add friend', message1, modified, userName);
            })
        }else{

            message = friendName + " didn't accept your request!";
            io.to(usersConnected.search(userName)).emit('confirm add friend', message, false, " ");

        }


     });


        socket.on('createConversation', function (username, friendUsername) {

            var room ;
            if (username < friendUsername)
                room = username + friendUsername;
            else
                room = friendUsername + username;
            console.log("connect room :" + room);
            socket.join(room);
            socket.emit('createConversation', room);
            //TODO
            //io.emit('connectToRoom', username, friendUsername);
            //io.to(usersConnected.search(username)).emit('connectToRoom', username, friendUsername);
            io.to(usersConnected.search(friendUsername)).emit('connectToRoom',room);
        });

        socket.on('connectToRoom', function (room) {
            console.log("user2connect");
            socket.join(room);
            socket.emit('createConversation', room);
        });

    });

function setNames(user, friend) {
    friendName = friend;
    userName = user;
}