#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('untitled:server');
var http = require('http');
var database = require('../public/databaseMongo/db');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
var io = require('socket.io')(server);

var Rooms;
var waitforit;
io.on('connection', function(socket){
    console.log(Object.keys(io.sockets.adapter.rooms)[0]);
    socket.on('existOpenedRooms',existOpenedRooms)
    existOpenedRooms();
    socket.on('friendsList',function (username) {
        database.findFriends(username,function (result) {
            console.log("List of friends:", result);
            socket.emit('friendsList',result);
        });
    });

    socket.on('chat message', function(msg){
        io.to(Object.keys(socket.rooms)[1]).emit('chat message', msg);
        console.log(Object.keys(socket.rooms)[1]);
    });

    socket.on('disconnect',function(){
        io.emit('system msg',socket.id + " is disconnected");
    });

    socket.on('user LogIn',function(UserName){
        console.log(UserName + " is connected")

        io.emit('system msg',UserName + " is connected");
        io.emit('UserName',UserName);
    });

    socket.on('add friend', function (username, friend) {
        console.log("username: " + username + " friend: " + friend);
        database.addFriend(username, friend, function (modified) {
            var message;
            if(modified){
                message = friend + " has been added in your friend list";
            }else{
                message = friend + " has not been added in your friend list";
            }
          socket.emit('confirm add friend', message);
        })
    });

    socket.on('createConversation',function(username,friendUsername){
        socket.join(username+friendUsername);
        socket.emit('createConversation');
        io.emit('connectToRoom',username,friendUsername);
    });

    socket.on('connectToRoom',function (room) {
        console.log("user2connect");
        socket.join(room);
        socket.emit('createConversation');
    });

});

function existOpenedRooms(username) {
        username== waitforit;
//        socket.join()
};

function  connectToRoom(room) {
    console.log("user2connect");
    socket.join(room);
    socket.emit('createConversation');
}